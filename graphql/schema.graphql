"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")


"Indicates what fields are available at the top level of a query operation."
type Query {

    me: User @guard(with: ["api"])

    user(
      id: ID @eq
      email: String @eq
    ): User @find

    users(
        orderBy: _ @orderBy(columns: ["updated_at", "name"])
        where: _ @whereConditions(columns: ["id"])
    ): [User!] @paginate(defaultCount: 10, type: CONNECTION) @guard(with: ["api"])
    usersAll: [User!] @all


    event(
        id: ID @eq
        email: String @eq
    ): Event @find
    events: [Event!] @paginate(defaultCount: 10)

    ticket(
        id: ID @eq
    ): Ticket @find
    tickets: [Ticket!] @paginate(defaultCount: 10)
}

type Mutation {
    login(input: LoginInput! @spread): User!
    register(input: RegisterInput! @spread): User!
    refresh: User! @guard(with: ["api"])

    createUser(input: CreateUserInput! @spread): User
    updateUser(id: ID!, name: String, email: String, password: String): User
    deleteUser(id: ID!): DeleteResponse!

    "Upload a file that is publicly available."
    upload(file: Upload!): Image
}


input RegisterInput {
    name: String!
    email: String!
    password: String!
    password_confirmation: String!
}


input LoginInput {
    email: String!
    password: String!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}


type DeleteResponse {
    status: String,
    message: String
}


type Image {
    id: ID!
    name: String!
    url: String!
    user: User
    created_at: String
    updated_at: String
}

type Event {
    name: String,
    date: String
}

type Ticket {
    event: Event!,
    user: User!
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    tickets: [Ticket!]

    api_token: String!

    expired_at: String!
}
